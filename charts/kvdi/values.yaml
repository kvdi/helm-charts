# Default values for kVDI.

# nameOverride -- A name override for resources created by the chart.
nameOverride: ""
# fullnameOverride -- A full name override for resources created by the chart.
fullnameOverride: ""

rbac:
  # rbac.proxy -- RBAC Proxy configurations for the manager deployment
  proxy:
    # rbac.proxy.repository -- The repository to pull the kube-rbac-proxy image from
    repository: gcr.io/kubebuilder/kube-rbac-proxy
    # rbac.proxy.tag -- The tag to pull for the kube-rbac-proxy.
    tag: v0.5.0
  serviceAccount:
    # rbac.serviceAccount.create -- Specifies whether a `ServiceAccount` should be created.
    create: true
    # rbac.serviceAccount.name -- The name of the `ServiceAccount` to use.
    # @default -- If not set and create is true, a name is generated using the fullname template.
    name:

manager:
  # manager.replicaCount -- The number of manager replicas to run.
  # If more than one is set, they will run in active/standby mode.
  replicaCount: 1
  image:
    # manager.image.repository -- The repository and image for the manager.
    repository: ghcr.io/kvdi/manager
    # manager.image.tag -- The tag for the manager image. Defaults to the chart version.
    tag: ""
    # manager.image.pullPolicy -- The `ImagePullPolicy` to use for the manager pod.
    pullPolicy: IfNotPresent
  # manager.imagePullSecrets -- Image pull secrets for the manager pod.
  imagePullSecrets: []
  # manager.podSecurityContext -- The `PodSecurityContext` for the manager pod.
  podSecurityContext: {}
  # manager.securityContext -- The container security context for the manager pod.
  securityContext: {}
  # manager.resources -- Resource limits for the manager pod.
  resources: {}
  # manager.nodeSelector -- Node selectors for the manager pod.
  nodeSelector: {}
  # manager.tolerations -- Node tolerations for the manager pod.
  tolerations: []
  # manager.affinity -- Node affinity for the manager pod.
  affinity: {}

vdi:
  # vdi.labels -- Extra labels to apply to kvdi related resources.
  labels:
    component: kvdi-cluster
  # vdi.spec -- The `VDICluster` spec.
  # @default -- The values described below are the same as the `VDICluster` CRD defaults.
  spec:
    # vdi.spec.appNamespace -- The namespace where the `kvdi` app will run.
    # This is different than the chart namespace. The chart lays down the manager
    # and a VDI configuration, and the manager takes care of the rest.
    appNamespace: default
    # vdi.spec.imagePullSecrets -- Image pull secrets to use for app containers.
    imagePullSecrets: []
    # vdi.spec.userdataSpec -- If configured, enables userdata persistence with
    # the given PVC spec. Every user will receive their own PV with the provided configuration.
    userdataSpec: {}
    # vdi.spec.app -- App level configurations for `kVDI`.
    # @default -- The values described below are the same as the `VDICluster` CRD defaults.
    app:
      # vdi.spec.app.image -- The image to use for app pods.
      # @default -- `ghcr.io/tinyzimmer/kvdi:app-${VERSION}`
      image: ""
      # vdi.spec.app.corsEnabled -- Enables CORS headers in API responses.
      corsEnabled: false
      # vdi.spec.app.auditLog -- Enables a detailed audit log of API events.
      # At the moment, these just get logged to stdout on the app instance.
      auditLog: false
      # vdi.spec.app.replicas -- The number of app replicas to run.
      replicas: 1
      # vdi.spec.app.serviceType -- The type of service to create in front of the app instance.
      serviceType: LoadBalancer
      # vdi.spec.app.serviceAnnotations -- Extra annotations to place on the kvdi app service.
      serviceAnnotations: {}
      # vdi.spec.app.tls -- TLS configurations for the app instance.
      tls:
        # vdi.spec.app.tls.serverSecret -- A pre-existing TLS secret to use for the HTTPS listener on the app instance.
        # If not provided, one is generated for you.
        serverSecret: ""
      # vdi.spec.app.resources -- Resource limits for the app pods.
      resources: {}
    # vdi.spec.metrics -- Metrics configurations for `kVDI`.
    metrics:
      # vdi.spec.metrics.serviceMonitor -- Configurations for creating a ServiceMonitor object to 
      # scrape `kVDI` metrics.
      serviceMonitor:
        # vdi.spec.metrics.serviceMonitor.create -- Set to true to have `kVDI` create a ServiceMonitor.
        # There is an example dashboard in the [examples](../../examples/example-grafana-dashboard.json) directory.
        create: false
        # vdi.spec.metrics.serviceMonitor.labels -- Extra labels to apply to the ServiceMonitor object.
        labels:
          release: prometheus
    # vdi.spec.auth -- Authentication configurations for `kVDI`.
    # @default -- The values described below are the same as the `VDICluster` CRD defaults.
    auth:
      # vdi.spec.auth.allowAnonymous -- Allow anonymous users to launch and use desktops.
      allowAnonymous: false
      # vdi.spec.auth.adminSecret -- The secret to store the generated admin password in.
      adminSecret: kvdi-admin-secret
      # vdi.spec.auth.tokenDuration -- The time-to-live for access tokens issued to users. 
      # If using OIDC/Oauth, you probably want to set this to a higher value, since refreshing
      # tokens is currently not supported.
      tokenDuration: "15m"
      # vdi.spec.auth.localAuth -- Use local-auth for the authentication backend. This is the default configuration.
      localAuth: {}
      # vdi.spec.auth.ldapAuth -- (object) Use an LDAP server for the authentication backend. See the [API reference](../../../doc/crds.md#LDAPConfig) for available configurations.
      ldapAuth: {}
      # vdi.spec.auth.oidcAuth -- (object) Use an OpenID/Oauth provider for the authentication backend. See the [API reference](../../../doc/crds.md#OIDCConfig) for available configurations.
      oidcAuth: {}
    # vdi.spec.secrets -- Secret storage configurations for `kVDI`.
    # @default -- The values described below are the same as the `VDICluster` CRD defaults.
    secrets:
      # vdi.spec.secrets.k8sSecret -- Use the Kubernetes secret storage backend. This is the default
      # if no other configuration is provided. For now, see the API reference for what to
      # use in place of these values if using a different backend.
      k8sSecret:
        # vdi.spec.secrets.k8sSecret.secretName -- The name of the Kubernetes `Secret`.
        # backing the secret storage.
        secretName: kvdi-app-secrets
      # vdi.spec.secrets.vault -- (object) Use vault for the secret storage backend. See the [API reference](../../../doc/crds.md#VaultConfig) for available configurations.
      vault: {}
    # vdi.spec.desktops -- Global configurations for desktop sessions.
    desktops:
      # vdi.spec.desktops.maxSessionLength -- When configured, desktop sessions will be terminated after running
      # for the specified period of time. Values are in duration formats (e.g. `3m`, `2h`, `1d`).
      maxSessionLength: ""

  # vdi.templates -- Preload DesktopTemplates into the VDI Cluster. You only need to define
  # the `metadata` and `spec`. Namespaces can be ignored sinced DesktopTemplates are cluster-scoped.
  templates: []
